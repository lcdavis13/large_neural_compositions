import itertools
import os
import subprocess
import csv

# User Config: Toggle between parallel or single-job execution of folds
NUM_FOLDS = 5  # Number of folds

# Define Hyperparameters
hyperparams = {
    "ode_steps": ["15"],
    "lr": ["0.0001", "0.0032", "0.1"],
    "reptile_rate": ["0.05", "0.5", "1.0"],
    "noise": ["0.0", "0.075"],
    "wd_factor": ["0.0", "2.0"],
    "interpolate": ["0"],
    "num_heads": ["2", "8"],
    "hidden_dim": ["8"],
    "attend_dim_per_head": ["4", "6"],
    "depth": ["4", "16"],
    "ffn_dim_multiplier": ["4"],
    "dropout": ["0.1", "0.5", "0.8"]
}

# Load whitelist table from a CSV-like input
whitelist_table = """
lr,reptile_rate,noise,attend_dim_per_head,num_heads,depth,dropout,wd_factor
LR,reptile_lr,noise,attend_dim_per_head,num_heads,depth,dropout,WD_factor
0.0032,1,0.075,6,2,16,0.1,0
0.0032,0.5,0,6,8,16,0.1,2
0.0032,1,0,4,8,16,0.1,0
0.0032,1,0,6,2,16,0.1,0
0.0032,0.5,0.075,4,8,16,0.1,2
0.0032,0.5,0.075,6,8,16,0.1,0
0.0032,0.5,0,6,8,4,0.1,0
0.0032,0.5,0,4,8,16,0.1,0
0.0032,0.05,0,4,8,16,0.1,2
0.0032,0.05,0,4,8,16,0.1,0
0.0032,1,0.075,4,8,16,0.1,2
0.0032,0.5,0,6,2,16,0.1,0
0.0032,0.05,0,4,8,4,0.1,2
0.0032,1,0,6,8,4,0.1,2
0.0032,1,0.075,6,8,4,0.1,0
0.0032,1,0,4,8,4,0.1,2
0.0032,0.05,0.075,6,8,16,0.1,0
0.0032,1,0.075,4,8,16,0.1,0
0.0032,0.05,0,6,8,4,0.1,0
0.0032,1,0,6,2,4,0.1,0
0.0032,0.5,0.075,4,8,4,0.1,2
0.0032,0.5,0.075,4,8,4,0.1,0
0.0032,0.5,0,4,8,4,0.1,0
0.0001,1,0,6,8,16,0.1,0
0.0032,0.05,0.075,6,8,4,0.1,0
0.0032,0.05,0.075,4,8,4,0.1,0
0.0032,1,0.075,6,2,4,0.1,0
0.0001,1,0,4,8,16,0.1,0
0.0032,1,0,6,8,4,0.1,0
0.0032,0.5,0.075,6,8,4,0.1,0
0.0032,0.05,0.075,4,8,16,0.1,0
0.0032,0.5,0.075,4,8,16,0.1,0
0.0032,1,0.075,6,2,4,0.1,2
0.0032,0.05,0.075,6,8,4,0.1,2
0.0001,1,0,6,8,16,0.1,2
0.0032,0.05,0,4,8,4,0.1,0
0.0032,0.05,0,6,8,4,0.1,2
0.0032,0.05,0.075,6,8,16,0.1,2
0.0032,1,0,4,8,4,0.5,2
0.0032,0.05,0,4,8,16,0.5,0
0.0032,0.5,0,4,8,4,0.1,2
0.0001,1,0.075,6,8,16,0.1,2
0.0032,1,0,4,8,4,0.1,0
0.0001,1,0.075,6,8,16,0.1,0
0.0032,0.05,0,4,8,16,0.5,2
0.0032,1,0.075,4,8,4,0.1,2
0.0032,0.05,0,6,8,16,0.1,0
0.0032,1,0.075,6,8,4,0.1,2
0.0032,0.05,0,6,8,16,0.1,2
0.0032,0.5,0,6,8,4,0.1,2
0.0032,1,0.075,6,2,16,0.1,2
0.0032,1,0,6,2,16,0.1,2
0.0032,0.05,0.075,4,8,16,0.1,2
0.0032,0.5,0.075,4,8,4,0.5,0
0.0032,0.05,0,6,2,16,0.1,0
0.0032,0.05,0.075,4,8,4,0.5,0
0.0032,1,0.075,4,2,4,0.1,2
0.0032,1,0.075,4,2,16,0.1,2
0.0032,0.5,0.075,6,8,4,0.1,2
0.0032,0.5,0.075,6,2,16,0.1,2
0.0032,0.05,0,4,8,4,0.5,2
0.0032,1,0,4,2,16,0.1,0
0.0032,0.05,0.075,4,8,4,0.1,2
0.0032,1,0.075,4,8,4,0.1,0
0.0032,0.5,0,4,8,4,0.5,0
0.0032,1,0.075,4,2,4,0.1,0
0.0032,1,0.075,4,8,4,0.5,2
0.0032,1,0,4,2,16,0.1,2
0.0032,1,0,6,2,4,0.1,2
0.0032,0.5,0.075,4,8,4,0.5,2
0.0032,1,0,6,2,4,0.5,0
0.0001,1,0,4,8,16,0.1,2
0.0032,0.5,0.075,6,2,16,0.1,0
0.0032,0.05,0,4,8,4,0.5,0
0.0032,0.05,0,6,2,4,0.1,0
0.0032,0.05,0.075,4,8,4,0.5,2
0.0032,1,0,6,2,4,0.5,2
0.0001,1,0.075,4,8,16,0.1,2
0.0032,0.5,0,4,8,4,0.5,2
0.0032,0.5,0.075,6,2,4,0.1,0
0.0032,1,0,4,2,4,0.1,2
0.0032,0.05,0.075,6,2,16,0.1,0
0.0001,0.5,0,6,8,16,0.1,0
0.0032,0.05,0.075,6,2,16,0.1,2
0.0032,0.5,0,6,2,16,0.1,2
0.0032,0.5,0.075,6,2,4,0.1,2
0.0032,1,0.075,6,2,4,0.5,0
0.0032,0.05,0,6,2,4,0.1,2
0.0032,1,0,4,8,4,0.5,0
0.0032,0.5,0,6,2,4,0.1,0
0.0001,1,0,6,8,4,0.1,2
0.0032,0.5,0,6,2,4,0.1,2
0.0001,1,0.075,4,8,16,0.1,0
0.0032,0.05,0,4,2,16,0.1,2
0.0032,0.05,0.075,4,2,16,0.1,2
0.0032,1,0.075,6,2,4,0.5,2
0.0032,1,0.075,4,8,4,0.5,0
0.0001,0.5,0,6,8,16,0.1,2
0.0001,0.5,0.075,6,8,16,0.1,2
0.0001,0.05,0.075,6,8,16,0.1,2
0.0001,1,0.075,6,8,4,0.1,0
0.0032,0.5,0.075,4,8,16,0.5,0
0.0032,1,0,4,8,16,0.1,2
0.0032,0.05,0,4,2,16,0.1,0
0.0032,1,0,4,2,4,0.5,0
0.0032,0.05,0.075,6,2,4,0.1,2
0.0032,0.05,0,6,2,16,0.1,2
0.0032,1,0,4,2,4,0.1,0
0.0032,1,0,4,2,4,0.5,2
0.0001,1,0,6,8,4,0.1,0
0.0001,0.05,0,6,8,16,0.1,0
0.0032,1,0,4,2,16,0.5,2
0.0001,0.05,0.075,6,8,16,0.1,0
0.0001,1,0.075,6,8,4,0.1,2
0.0032,1,0,4,8,4,0.8,0
0.0032,0.5,0,4,2,16,0.1,0
0.0001,0.05,0,6,8,16,0.1,2
0.0032,1,0.075,4,2,4,0.5,0
0.0032,0.5,0,4,8,16,0.5,2
0.0032,0.5,0.075,4,8,16,0.5,2
0.0032,0.05,0.075,6,2,16,0.5,0
0.0001,1,0.075,4,8,4,0.1,0
0.0032,0.05,0.075,6,2,4,0.1,0
0.0032,0.5,0,4,2,4,0.1,0
0.0001,1,0.075,4,8,4,0.1,2
0.0032,0.5,0,4,2,4,0.1,2
0.0032,0.5,0,6,2,16,0.5,0
0.0032,0.05,0.075,4,2,4,0.1,2
0.0001,0.5,0.075,6,8,16,0.1,0
0.0032,1,0.075,6,2,16,0.5,0
0.0032,1,0,4,2,16,0.5,0
0.0001,0.5,0,4,8,16,0.1,2
0.0032,1,0,4,8,4,0.8,2
0.0001,0.05,0,4,8,16,0.1,2
0.0001,1,0,4,8,4,0.1,2
0.0032,0.05,0.075,4,2,16,0.1,0
0.0032,0.05,0,4,2,4,0.1,2
0.0032,0.05,0,4,2,4,0.1,0
0.0001,0.5,0,4,8,16,0.1,0
0.0032,0.05,0.075,4,8,16,0.5,0
0.0001,1,0,4,8,4,0.1,0
0.0001,1,0,6,2,16,0.1,2
0.0032,0.5,0.075,6,2,4,0.5,0
0.0032,0.05,0.075,4,8,16,0.5,2
0.0001,1,0.075,6,2,16,0.1,2
0.0032,0.05,0.075,6,2,4,0.5,2
0.0032,1,0.075,4,2,4,0.5,2
0.0032,0.5,0,4,2,16,0.1,2
0.0001,0.05,0.075,4,8,16,0.1,2
0.0032,0.5,0,4,2,16,0.5,0
0.0032,0.5,0.075,4,2,4,0.1,0
0.0001,1,0,6,2,16,0.1,0
0.0032,0.5,0.075,6,2,4,0.5,2
0.0032,0.05,0.075,6,2,16,0.5,2
0.0032,0.05,0,6,2,16,0.5,2
0.0032,1,0.075,4,2,16,0.5,0
0.0032,0.05,0.075,4,2,4,0.1,0
0.0001,0.5,0.075,6,8,4,0.1,0
0.0001,0.05,0.075,4,8,16,0.1,0
0.0001,0.5,0.075,4,8,16,0.1,0
0.0032,0.5,0,6,8,16,0.1,0
0.0032,1,0,4,2,4,0.8,0
0.0001,0.05,0,6,8,4,0.1,2
0.0032,0.5,0,6,2,4,0.5,0
0.0032,0.5,0.075,4,2,16,0.1,2
0.0032,0.05,0,6,2,4,0.5,2
0.0032,0.05,0,6,2,4,0.5,0
0.0001,0.5,0.075,6,8,4,0.1,2
0.0001,0.5,0,6,8,4,0.1,2
0.0032,0.5,0,6,8,4,0.5,2
0.0001,0.5,0.075,4,8,16,0.1,2
0.0032,1,0,6,2,4,0.8,0
0.0001,0.05,0,6,8,4,0.1,0
0.0032,1,0.075,6,2,4,0.8,0
0.0001,0.05,0.075,6,8,4,0.1,0
0.0032,0.05,0,4,2,4,0.5,2
0.0032,0.5,0,6,2,16,0.5,2
0.0032,0.5,0.075,4,2,4,0.1,2
0.0032,0.5,0,6,2,4,0.5,2
0.0032,0.5,0.075,6,2,16,0.5,0
0.0001,0.05,0.075,6,8,4,0.1,2
0.0001,0.5,0,6,8,4,0.1,0
0.0032,1,0.075,6,2,4,0.8,2
0.0032,1,0.075,4,2,4,0.8,2
0.0032,0.5,0.075,6,2,16,0.5,2
0.0001,1,0,6,8,16,0.5,2
0.0032,0.05,0.075,6,8,4,0.5,0
0.0032,0.05,0.075,6,2,4,0.5,0
0.0001,0.05,0,4,8,16,0.1,0
0.0032,1,0,6,2,4,0.8,2
0.0032,0.5,0.075,4,2,4,0.5,0
0.0032,1,0,4,2,4,0.8,2
0.0032,0.05,0.075,4,2,4,0.5,0
0.0001,1,0.075,6,2,4,0.1,2
0.0032,0.05,0.075,6,8,4,0.5,2
0.0032,0.05,0,6,2,4,0.8,0
0.0032,0.05,0.075,4,2,4,0.5,2
0.0032,0.5,0.075,4,2,16,0.5,0
0.0032,1,0,6,8,4,0.5,2
"""

# Parse whitelist table into a list of dictionaries
whitelist = []
reader = csv.DictReader(whitelist_table.strip().splitlines())
for row in reader:
    whitelist.append(row)

# Calculate all combinations of hyperparameters
param_names = list(hyperparams.keys())
param_values = list(hyperparams.values())
combinations = list(itertools.product(*param_values))

print(f"Total number of hyperparam combinations: {len(combinations)}")

# Run each combination
filtered_combinations = []
for combo in combinations:
    hyperparam_values = dict(zip(param_names, combo))
    # Match only if the combination is in the whitelist
    for whitelist_item in whitelist:
        if all(key in hyperparam_values and str(hyperparam_values[key]) == str(whitelist_item[key])
               for key in whitelist_item):
            filtered_combinations.append(hyperparam_values)
            break

print(f"Filtered number of hyperparam combinations: {len(filtered_combinations)}")

# Run each filtered combination
for combo_index, hyperparam_values in enumerate(filtered_combinations):
    # Build the command
    command = [
        "python", "run.py",
        "--kfolds", str(NUM_FOLDS),
        "--headless",
        "--jobid", str(combo_index),
        "--whichfold", "-1",
        "--lr", hyperparam_values["lr"],
        "--reptile_rate", hyperparam_values["reptile_rate"],
        "--mb", "20",
        "--noise", hyperparam_values["noise"],
        "--interpolate", hyperparam_values["interpolate"],
        "--num_heads", hyperparam_values["num_heads"],
        "--hidden_dim", hyperparam_values["hidden_dim"],
        "--attend_dim", hyperparam_values["attend_dim_per_head"],
        "--depth", hyperparam_values["depth"],
        "--ffn_dim_multiplier", hyperparam_values["ffn_dim_multiplier"],
        "--dropout", hyperparam_values["dropout"],
        "--ode_steps", hyperparam_values["ode_steps"],
        "--wd_factor", hyperparam_values["wd_factor"]
    ]
    
    # Print the command for debugging
    print("Command:", " ".join(command))
    
    # Execute the command
    try:
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error during execution: {e}")
        continue
